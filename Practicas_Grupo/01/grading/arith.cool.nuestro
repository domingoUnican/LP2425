#name "arith.cool"
 TYPEID A
 CONTRIBUTION
 FROM
 TYPEID Anne
 TYPEID Sheets
 SHEETS
 CORY
 TYPEID Tests
 THE
 ARITHMETIC
 OPERATIONS
 AND
 VARIOUS
 OTHER
 THINGS
 CLASS
 TYPEID A
 VAR
 TYPEID Int
 VALUE
 TYPEID Int
 VAR
 SET_VAR
 NUM
 TYPEID Int
 TYPEID SELF_TYPE
 VAR
 NUM
 SELF
 METHOD1
 NUM
 TYPEID Int
 TYPEID SELF_TYPE
 SAME
 SELF
 METHOD2
 NUM1
 TYPEID Int
 NUM2
 TYPEID Int
 TYPEID B
 PLUS
 LET
 X
 TYPEID Int
 IN
 X
 NUM1
 NUM2
 NEW
 TYPEID B
 SET_VAR
 X
 METHOD3
 NUM
 TYPEID Int
 TYPEID C
 NEGATE
 LET
 X
 TYPEID Int
 IN
 X
 NUM
 NEW
 TYPEID C
 SET_VAR
 X
 METHOD4
 NUM1
 TYPEID Int
 NUM2
 TYPEID Int
 TYPEID D
 DIFF
 IF
 NUM2
 NUM1
 THEN
 LET
 X
 TYPEID Int
 IN
 X
 NUM1
 NUM2
 NEW
 TYPEID D
 SET_VAR
 X
 ELSE
 LET
 X
 TYPEID Int
 IN
 X
 NUM2
 NUM1
 NEW
 TYPEID D
 SET_VAR
 X
 FI
 METHOD5
 NUM
 TYPEID Int
 TYPEID E
 FACTORIAL
 LET
 X
 TYPEID Int
 IN
 LET
 Y
 TYPEID Int
 IN
 WHILE
 Y
 NUM
 LOOP
 X
 X
 Y
 Y
 Y
 POOL
 NEW
 TYPEID E
 SET_VAR
 X
 CLASS
 TYPEID B
 INHERITS
 TYPEID A
 TYPEID B
 IS
 A
 NUMBER
 SQUARED
 METHOD5
 NUM
 TYPEID Int
 TYPEID E
 SQUARE
 LET
 X
 TYPEID Int
 IN
 X
 NUM
 NUM
 NEW
 TYPEID E
 SET_VAR
 X
 CLASS
 TYPEID C
 INHERITS
 TYPEID B
 METHOD6
 NUM
 TYPEID Int
 TYPEID A
 NEGATE
 LET
 X
 TYPEID Int
 IN
 X
 NUM
 NEW
 TYPEID A
 SET_VAR
 X
 METHOD5
 NUM
 TYPEID Int
 TYPEID E
 CUBE
 LET
 X
 TYPEID Int
 IN
 X
 NUM
 NUM
 NUM
 NEW
 TYPEID E
 SET_VAR
 X
 CLASS
 TYPEID D
 INHERITS
 TYPEID B
 METHOD7
 NUM
 TYPEID Int
 TYPEID Bool
 DIVISIBLE
 BY
 LET
 X
 TYPEID Int
 NUM
 IN
 IF
 X
 THEN
 METHOD7
 X
 ELSE
 IF
 X
 THEN
 BOOL_CONST true
 ELSE
 IF
 X
 THEN
 BOOL_CONST true
 ELSE
 IF
 X
 THEN
 BOOL_CONST true
 ELSE
 METHOD7
 X
 FI
 FI
 FI
 FI
 CLASS
 TYPEID E
 INHERITS
 TYPEID D
 METHOD6
 NUM
 TYPEID Int
 TYPEID A
 DIVISION
 LET
 X
 TYPEID Int
 IN
 X
 NUM
 NEW
 TYPEID A
 SET_VAR
 X
 TYPEID The
 FOLLOWING
 CODE
 IS
 FROM
 ATOI
 CL
 IN
 CS164
 EXAMPLES
 TYPEID The
 CLASS
 TYPEID A2I
 PROVIDES
 INTEGER
 TO
 STRING
 AND
 STRING
 TO
 INTEGER
 CONVERSION
 ROUTINES
 TYPEID To
 USE
 THESE
 ROUTINES
 EITHER
 INHERIT
 THEM
 IN
 THE
 CLASS
 WHERE
 NEEDED
 HAVE
 A
 DUMMY
 VARIABLE
 BOUND
 TO
 SOMETHING
 OF
 TYPE
 TYPEID A2I
 OR
 SIMPL
 WRITE
 NEW
 TYPEID A2I
 METHOD
 ARGUMENT
 C2I
 TYPEID Converts
 A
 CHARACTER
 STRING
 TO
 AN
 INTEGER
 TYPEID Aborts
 IF
 THE
 STRING
 IS
 NOT
 STR_CONST "0"
 THROUGH
 STR_CONST "9"
 CLASS
 TYPEID A2I
 C2I
 CHAR
 TYPEID String
 TYPEID Int
 IF
 CHAR
 STR_CONST "0"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "1"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "2"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "3"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "4"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "5"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "6"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "7"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "8"
 THEN
 ELSE
 IF
 CHAR
 STR_CONST "9"
 THEN
 ELSE
 ABORT
 THE
 IS
 NEEDED
 TO
 SATISFY
 THE
 TYPCHECKER
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 I2C
 IS
 THE
 INVERSE
 OF
 C2I
 I2C
 I
 TYPEID Int
 TYPEID String
 IF
 I
 THEN
 STR_CONST "0"
 ELSE
 IF
 I
 THEN
 STR_CONST "1"
 ELSE
 IF
 I
 THEN
 STR_CONST "2"
 ELSE
 IF
 I
 THEN
 STR_CONST "3"
 ELSE
 IF
 I
 THEN
 STR_CONST "4"
 ELSE
 IF
 I
 THEN
 STR_CONST "5"
 ELSE
 IF
 I
 THEN
 STR_CONST "6"
 ELSE
 IF
 I
 THEN
 STR_CONST "7"
 ELSE
 IF
 I
 THEN
 STR_CONST "8"
 ELSE
 IF
 I
 THEN
 STR_CONST "9"
 ELSE
 ABORT
 STR_CONST ""
 THE
 STR_CONST ""
 IS
 NEEDED
 TO
 SATISFY
 THE
 TYPCHECKER
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 A2I
 CONVERTS
 AN
 TYPEID ASCII
 STRING
 INTO
 AN
 INTEGER
 TYPEID The
 EMPTY
 STRING
 IS
 CONVERTED
 TO
 TYPEID Signed
 AND
 UNSIGNED
 STRINGS
 ARE
 HANDLED
 TYPEID The
 METHOD
 ABORTS
 IF
 THE
 STRING
 DOES
 NOT
 REPRESENT
 AN
 INTEGER
 TYPEID Very
 LONG
 STRINGS
 OF
 DIGITS
 PRODUCE
 STRANGE
 ANSWERS
 BECAUSE
 OF
 ARITHMETIC
 OVERFLOW
 A2I
 S
 TYPEID String
 TYPEID Int
 IF
 S
 LENGTH
 THEN
 ELSE
 IF
 S
 SUBSTR
 THEN
 A2I_AUX
 S
 SUBSTR
 S
 LENGTH
 ELSE
 IF
 S
 SUBSTR
 THEN
 A2I_AUX
 S
 SUBSTR
 S
 LENGTH
 ELSE
 A2I_AUX
 S
 FI
 FI
 FI
 A2I_AUX
 CONVERTS
 THE
 USIGNED
 PORTION
 OF
 THE
 STRING
 TYPEID As
 A
 PROGRAMMING
 EXAMPLE
 THIS
 METHOD
 IS
 WRITTEN
 ITERATIVELY
 A2I_AUX
 S
 TYPEID String
 TYPEID Int
 LET
 INT
 TYPEID Int
 IN
 LET
 J
 TYPEID Int
 S
 LENGTH
 IN
 LET
 I
 TYPEID Int
 IN
 WHILE
 I
 J
 LOOP
 INT
 INT
 C2I
 S
 SUBSTR
 I
 I
 I
 POOL
 INT
 I2A
 CONVERTS
 AN
 INTEGER
 TO
 A
 STRING
 TYPEID Positive
 AND
 NEGATIVE
 NUMBERS
 ARE
 HANDLED
 CORRECTLY
 I2A
 I
 TYPEID Int
 TYPEID String
 IF
 I
 THEN
 STR_CONST "0"
 ELSE
 IF
 I
 THEN
 I2A_AUX
 I
 ELSE
 CONCAT
 I2A_AUX
 I
 FI
 FI
 I2A_AUX
 IS
 AN
 EXAMPLE
 USING
 RECURSION
 I2A_AUX
 I
 TYPEID Int
 TYPEID String
 IF
 I
 THEN
 STR_CONST ""
 ELSE
 LET
 NEXT
 TYPEID Int
 I
 IN
 I2A_AUX
 NEXT
 CONCAT
 I2C
 I
 NEXT
 FI
 CLASS
 TYPEID Main
 INHERITS
 TYPEID IO
 CHAR
 TYPEID String
 AVAR
 TYPEID A
 A_VAR
 TYPEID A
 FLAG
 TYPEID Bool
 BOOL_CONST true
 MENU
 TYPEID String
 OUT_STRING
 N
 TTO
 ADD
 A
 NUMBER
 TO
 PRINT
 AVAR
 OUT_STRING
 ENTER
 A
 N
 OUT_STRING
 TTO
 NEGATE
 PRINT
 AVAR
 OUT_STRING
 ENTER
 B
 N
 OUT_STRING
 TTO
 FIND
 THE
 DIFFERENCE
 BETWEEN
 PRINT
 AVAR
 OUT_STRING
 AND
 ANOTHER
 NUMBER
 ENTER
 C
 N
 OUT_STRING
 TTO
 FIND
 THE
 FACTORIAL
 OF
 PRINT
 AVAR
 OUT_STRING
 ENTER
 D
 N
 OUT_STRING
 TTO
 SQUARE
 PRINT
 AVAR
 OUT_STRING
 ENTER
 E
 N
 OUT_STRING
 TTO
 CUBE
 PRINT
 AVAR
 OUT_STRING
 ENTER
 F
 N
 OUT_STRING
 TTO
 FIND
 OUT
 IF
 PRINT
 AVAR
 OUT_STRING
 IS
 A
 MULTIPLE
 OF
 ENTER
 G
 N
 OUT_STRING
 TTO
 DIVIDE
 PRINT
 AVAR
 OUT_STRING
 BY
 ENTER
 H
 N
 OUT_STRING
 TTO
 GET
 A
 NEW
 NUMBER
 ENTER
 J
 N
 OUT_STRING
 TTO
 QUIT
 ENTER
 Q
 N
 N
 IN_STRING
 PROMPT
 TYPEID String
 OUT_STRING
 N
 OUT_STRING
 TYPEID Please
 ENTER
 A
 NUMBER
 IN_STRING
 GET_INT
 TYPEID Int
 LET
 Z
 TYPEID A2I
 NEW
 TYPEID A2I
 IN
 LET
 S
 TYPEID String
 PROMPT
 IN
 Z
 A2I
 S
 IS_EVEN
 NUM
 TYPEID Int
 TYPEID Bool
 LET
 X
 TYPEID Int
 NUM
 IN
 IF
 X
 THEN
 IS_EVEN
 X
 ELSE
 IF
 X
 THEN
 BOOL_CONST true
 ELSE
 IF
 X
 THEN
 BOOL_CONST true
 ELSE
 IS_EVEN
 X
 FI
 FI
 FI
 CLASS_TYPE
 VAR
 TYPEID A
 TYPEID SELF_TYPE
 CASE
 VAR
 OF
 A
 TYPEID A
 OUT_STRING
 TYPEID Class
 TYPE
 IS
 NOW
 TYPEID A
 N
 B
 TYPEID B
 OUT_STRING
 TYPEID Class
 TYPE
 IS
 NOW
 TYPEID B
 N
 C
 TYPEID C
 OUT_STRING
 TYPEID Class
 TYPE
 IS
 NOW
 TYPEID C
 N
 D
 TYPEID D
 OUT_STRING
 TYPEID Class
 TYPE
 IS
 NOW
 TYPEID D
 N
 E
 TYPEID E
 OUT_STRING
 TYPEID Class
 TYPE
 IS
 NOW
 TYPEID E
 N
 O
 TYPEID Object
 OUT_STRING
 TYPEID Oooops
 N
 ESAC
 PRINT
 VAR
 TYPEID A
 TYPEID SELF_TYPE
 LET
 Z
 TYPEID A2I
 NEW
 TYPEID A2I
 IN
 OUT_STRING
 Z
 I2A
 VAR
 VALUE
 OUT_STRING
 MAIN
 TYPEID Object
 AVAR
 NEW
 TYPEID A
 WHILE
 FLAG
 LOOP
 AVAR
 NEW
 TYPEID A
 SET_VAR
 GET_INT
 OUT_STRING
 NUMBER
 PRINT
 AVAR
 IF
 IS_EVEN
 AVAR
 VALUE
 THEN
 OUT_STRING
 IS
 EVEN
 N
 ELSE
 OUT_STRING
 IS
 ODD
 N
 FI
 PRINT
 AVAR
 PRINTS
 OUT
 ANSWER
 CLASS_TYPE
 AVAR
 CHAR
 MENU
 IF
 CHAR
 STR_CONST "a"
 THEN
 ADD
 A_VAR
 NEW
 TYPEID A
 SET_VAR
 GET_INT
 AVAR
 NEW
 TYPEID B
 METHOD2
 AVAR
 VALUE
 A_VAR
 VALUE
 ELSE
 IF
 CHAR
 STR_CONST "b"
 THEN
 NEGATE
 CASE
 AVAR
 OF
 C
 TYPEID C
 AVAR
 C
 METHOD6
 C
 VALUE
 A
 TYPEID A
 AVAR
 A
 METHOD3
 A
 VALUE
 O
 TYPEID Object
 OUT_STRING
 TYPEID Oooops
 N
 ABORT
 ESAC
 ELSE
 IF
 CHAR
 STR_CONST "c"
 THEN
 DIFF
 A_VAR
 NEW
 TYPEID A
 SET_VAR
 GET_INT
 AVAR
 NEW
 TYPEID D
 METHOD4
 AVAR
 VALUE
 A_VAR
 VALUE
 ELSE
 IF
 CHAR
 STR_CONST "d"
 THEN
 AVAR
 NEW
 TYPEID C
 TYPEID A
 METHOD5
 AVAR
 VALUE
 ELSE
 FACTORIAL
 IF
 CHAR
 STR_CONST "e"
 THEN
 AVAR
 NEW
 TYPEID C
 TYPEID B
 METHOD5
 AVAR
 VALUE
 ELSE
 SQUARE
 IF
 CHAR
 STR_CONST "f"
 THEN
 AVAR
 NEW
 TYPEID C
 TYPEID C
 METHOD5
 AVAR
 VALUE
 ELSE
 CUBE
 IF
 CHAR
 STR_CONST "g"
 THEN
 MULTIPLE
 OF
 IF
 NEW
 TYPEID D
 METHOD7
 AVAR
 VALUE
 THEN
 AVAR
 NEW
 TYPEID A
 METHOD1
 AVAR
 VALUE
 OUT_STRING
 NUMBER
 PRINT
 AVAR
 OUT_STRING
 IS
 DIVISIBLE
 BY
 N
 ELSE
 AVAR
 NEW
 TYPEID A
 SET_VAR
 OUT_STRING
 NUMBER
 PRINT
 AVAR
 OUT_STRING
 IS
 NOT
 DIVISIBLE
 BY
 N
 FI
 ELSE
 IF
 CHAR
 STR_CONST "h"
 THEN
 LET
 X
 TYPEID A
 IN
 X
 NEW
 TYPEID E
 METHOD6
 AVAR
 VALUE
 LET
 R
 TYPEID Int
 AVAR
 VALUE
 X
 VALUE
 IN
 OUT_STRING
 NUMBER
 PRINT
 AVAR
 OUT_STRING
 IS
 EQUAL
 TO
 PRINT
 X
 OUT_STRING
 TIMES
 WITH
 A
 REMAINDER
 OF
 LET
 A
 TYPEID A2I
 NEW
 TYPEID A2I
 IN
 OUT_STRING
 A
 I2A
 R
 OUT_STRING
 N
 END
 LET
 A
 END
 LET
 R
 AVAR
 X
 END
 LET
 X
 ELSE
 IF
 CHAR
 STR_CONST "j"
 THEN
 AVAR
 NEW
 TYPEID A
 ELSE
 IF
 CHAR
 STR_CONST "q"
 THEN
 FLAG
 BOOL_CONST true
 ELSE
 AVAR
 NEW
 TYPEID A
 METHOD1
 AVAR
 VALUE
 DIVIDE
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 POOL