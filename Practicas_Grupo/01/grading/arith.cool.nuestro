#name "arith.cool"
 TYPEID A
 OBJECTID contribution
 OBJECTID from
 TYPEID Anne
 TYPEID Sheets
 OBJECTID sheets
 OBJECTID cory
 TYPEID Tests
 OBJECTID the
 OBJECTID arithmetic
 OBJECTID operations
 OBJECTID and
 OBJECTID various
 OBJECTID other
 OBJECTID things
 CLASS
 TYPEID A
 OBJECTID var
 TYPEID Int
 OBJECTID value
 TYPEID Int
 OBJECTID var
 OBJECTID set_var
 OBJECTID num
 TYPEID Int
 TYPEID SELF_TYPE
 OBJECTID var
 OBJECTID num
 OBJECTID self
 OBJECTID method1
 OBJECTID num
 TYPEID Int
 TYPEID SELF_TYPE
 OBJECTID same
 OBJECTID self
 OBJECTID method2
 OBJECTID num1
 TYPEID Int
 OBJECTID num2
 TYPEID Int
 TYPEID B
 OBJECTID plus
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num1
 OBJECTID num2
 NEW
 TYPEID B
 OBJECTID set_var
 OBJECTID x
 OBJECTID method3
 OBJECTID num
 TYPEID Int
 TYPEID C
 OBJECTID negate
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num
 NEW
 TYPEID C
 OBJECTID set_var
 OBJECTID x
 OBJECTID method4
 OBJECTID num1
 TYPEID Int
 OBJECTID num2
 TYPEID Int
 TYPEID D
 OBJECTID diff
 IF
 OBJECTID num2
 OBJECTID num1
 THEN
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num1
 OBJECTID num2
 NEW
 TYPEID D
 OBJECTID set_var
 OBJECTID x
 ELSE
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num2
 OBJECTID num1
 NEW
 TYPEID D
 OBJECTID set_var
 OBJECTID x
 FI
 OBJECTID method5
 OBJECTID num
 TYPEID Int
 TYPEID E
 OBJECTID factorial
 LET
 OBJECTID x
 TYPEID Int
 IN
 LET
 OBJECTID y
 TYPEID Int
 IN
 WHILE
 OBJECTID y
 OBJECTID num
 LOOP
 OBJECTID x
 OBJECTID x
 OBJECTID y
 OBJECTID y
 OBJECTID y
 POOL
 NEW
 TYPEID E
 OBJECTID set_var
 OBJECTID x
 CLASS
 TYPEID B
 INHERITS
 TYPEID A
 TYPEID B
 OBJECTID is
 BOOL_CONST false
 OBJECTID number
 OBJECTID squared
 OBJECTID method5
 OBJECTID num
 TYPEID Int
 TYPEID E
 OBJECTID square
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num
 OBJECTID num
 NEW
 TYPEID E
 OBJECTID set_var
 OBJECTID x
 CLASS
 TYPEID C
 INHERITS
 TYPEID B
 OBJECTID method6
 OBJECTID num
 TYPEID Int
 TYPEID A
 OBJECTID negate
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num
 NEW
 TYPEID A
 OBJECTID set_var
 OBJECTID x
 OBJECTID method5
 OBJECTID num
 TYPEID Int
 TYPEID E
 OBJECTID cube
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num
 OBJECTID num
 OBJECTID num
 NEW
 TYPEID E
 OBJECTID set_var
 OBJECTID x
 CLASS
 TYPEID D
 INHERITS
 TYPEID B
 OBJECTID method7
 OBJECTID num
 TYPEID Int
 TYPEID Bool
 OBJECTID divisible
 OBJECTID by
 LET
 OBJECTID x
 TYPEID Int
 OBJECTID num
 IN
 IF
 OBJECTID x
 THEN
 OBJECTID method7
 OBJECTID x
 ELSE
 IF
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 IF
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 OBJECTID method7
 OBJECTID x
 FI
 FI
 FI
 FI
 CLASS
 TYPEID E
 INHERITS
 TYPEID D
 OBJECTID method6
 OBJECTID num
 TYPEID Int
 TYPEID A
 OBJECTID division
 LET
 OBJECTID x
 TYPEID Int
 IN
 OBJECTID x
 OBJECTID num
 NEW
 TYPEID A
 OBJECTID set_var
 OBJECTID x
 TYPEID The
 OBJECTID following
 OBJECTID code
 OBJECTID is
 OBJECTID from
 OBJECTID atoi
 OBJECTID cl
 IN
 OBJECTID cs164
 OBJECTID examples
 TYPEID The
 CLASS
 TYPEID A2I
 OBJECTID provides
 OBJECTID integer
 OBJECTID to
 OBJECTID string
 OBJECTID and
 OBJECTID string
 OBJECTID to
 OBJECTID integer
 OBJECTID conversion
 OBJECTID routines
 TYPEID To
 OBJECTID use
 OBJECTID these
 OBJECTID routines
 OBJECTID either
 OBJECTID inherit
 OBJECTID them
 IN
 OBJECTID the
 CLASS
 OBJECTID where
 OBJECTID needed
 OBJECTID have
 BOOL_CONST false
 OBJECTID dummy
 OBJECTID variable
 OBJECTID bound
 OBJECTID to
 OBJECTID something
 OF
 OBJECTID type
 TYPEID A2I
 OBJECTID or
 OBJECTID simpl
 OBJECTID write
 NEW
 TYPEID A2I
 OBJECTID method
 OBJECTID argument
 OBJECTID c2i
 TYPEID Converts
 BOOL_CONST false
 OBJECTID character
 OBJECTID string
 OBJECTID to
 OBJECTID an
 OBJECTID integer
 TYPEID Aborts
 IF
 OBJECTID the
 OBJECTID string
 OBJECTID is
 NOT
 STR_CONST "0"
 OBJECTID through
 STR_CONST "9"
 CLASS
 TYPEID A2I
 OBJECTID c2i
 OBJECTID char
 TYPEID String
 TYPEID Int
 IF
 OBJECTID char
 STR_CONST "0"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "1"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "2"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "3"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "4"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "5"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "6"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "7"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "8"
 THEN
 ELSE
 IF
 OBJECTID char
 STR_CONST "9"
 THEN
 ELSE
 OBJECTID abort
 OBJECTID the
 OBJECTID is
 OBJECTID needed
 OBJECTID to
 OBJECTID satisfy
 OBJECTID the
 OBJECTID typchecker
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 OBJECTID i2c
 OBJECTID is
 OBJECTID the
 OBJECTID inverse
 OF
 OBJECTID c2i
 OBJECTID i2c
 OBJECTID i
 TYPEID Int
 TYPEID String
 IF
 OBJECTID i
 THEN
 STR_CONST "0"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "1"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "2"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "3"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "4"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "5"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "6"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "7"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "8"
 ELSE
 IF
 OBJECTID i
 THEN
 STR_CONST "9"
 ELSE
 OBJECTID abort
 STR_CONST ""
 OBJECTID the
 STR_CONST ""
 OBJECTID is
 OBJECTID needed
 OBJECTID to
 OBJECTID satisfy
 OBJECTID the
 OBJECTID typchecker
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 OBJECTID a2i
 OBJECTID converts
 OBJECTID an
 TYPEID ASCII
 OBJECTID string
 OBJECTID into
 OBJECTID an
 OBJECTID integer
 TYPEID The
 OBJECTID empty
 OBJECTID string
 OBJECTID is
 OBJECTID converted
 OBJECTID to
 TYPEID Signed
 OBJECTID and
 OBJECTID unsigned
 OBJECTID strings
 OBJECTID are
 OBJECTID handled
 TYPEID The
 OBJECTID method
 OBJECTID aborts
 IF
 OBJECTID the
 OBJECTID string
 OBJECTID does
 NOT
 OBJECTID represent
 OBJECTID an
 OBJECTID integer
 TYPEID Very
 OBJECTID long
 OBJECTID strings
 OF
 OBJECTID digits
 OBJECTID produce
 OBJECTID strange
 OBJECTID answers
 OBJECTID because
 OF
 OBJECTID arithmetic
 OBJECTID overflow
 OBJECTID a2i
 BOOL_CONST false
 TYPEID String
 TYPEID Int
 IF
 BOOL_CONST false
 OBJECTID length
 THEN
 ELSE
 IF
 BOOL_CONST false
 OBJECTID substr
 THEN
 OBJECTID a2i_aux
 BOOL_CONST false
 OBJECTID substr
 BOOL_CONST false
 OBJECTID length
 ELSE
 IF
 BOOL_CONST false
 OBJECTID substr
 THEN
 OBJECTID a2i_aux
 BOOL_CONST false
 OBJECTID substr
 BOOL_CONST false
 OBJECTID length
 ELSE
 OBJECTID a2i_aux
 BOOL_CONST false
 FI
 FI
 FI
 OBJECTID a2i_aux
 OBJECTID converts
 OBJECTID the
 OBJECTID usigned
 OBJECTID portion
 OF
 OBJECTID the
 OBJECTID string
 TYPEID As
 BOOL_CONST false
 OBJECTID programming
 OBJECTID example
 OBJECTID this
 OBJECTID method
 OBJECTID is
 OBJECTID written
 OBJECTID iteratively
 OBJECTID a2i_aux
 BOOL_CONST false
 TYPEID String
 TYPEID Int
 LET
 OBJECTID int
 TYPEID Int
 IN
 LET
 OBJECTID j
 TYPEID Int
 BOOL_CONST false
 OBJECTID length
 IN
 LET
 OBJECTID i
 TYPEID Int
 IN
 WHILE
 OBJECTID i
 OBJECTID j
 LOOP
 OBJECTID int
 OBJECTID int
 OBJECTID c2i
 BOOL_CONST false
 OBJECTID substr
 OBJECTID i
 OBJECTID i
 OBJECTID i
 POOL
 OBJECTID int
 OBJECTID i2a
 OBJECTID converts
 OBJECTID an
 OBJECTID integer
 OBJECTID to
 BOOL_CONST false
 OBJECTID string
 TYPEID Positive
 OBJECTID and
 OBJECTID negative
 OBJECTID numbers
 OBJECTID are
 OBJECTID handled
 OBJECTID correctly
 OBJECTID i2a
 OBJECTID i
 TYPEID Int
 TYPEID String
 IF
 OBJECTID i
 THEN
 STR_CONST "0"
 ELSE
 IF
 OBJECTID i
 THEN
 OBJECTID i2a_aux
 OBJECTID i
 ELSE
 OBJECTID concat
 OBJECTID i2a_aux
 OBJECTID i
 FI
 FI
 OBJECTID i2a_aux
 OBJECTID is
 OBJECTID an
 OBJECTID example
 OBJECTID using
 OBJECTID recursion
 OBJECTID i2a_aux
 OBJECTID i
 TYPEID Int
 TYPEID String
 IF
 OBJECTID i
 THEN
 STR_CONST ""
 ELSE
 LET
 OBJECTID next
 TYPEID Int
 OBJECTID i
 IN
 OBJECTID i2a_aux
 OBJECTID next
 OBJECTID concat
 OBJECTID i2c
 OBJECTID i
 OBJECTID next
 FI
 CLASS
 TYPEID Main
 INHERITS
 TYPEID IO
 OBJECTID char
 TYPEID String
 OBJECTID avar
 TYPEID A
 OBJECTID a_var
 TYPEID A
 OBJECTID flag
 TYPEID Bool
 BOOL_CONST true
 OBJECTID menu
 TYPEID String
 OBJECTID out_string
 OBJECTID n
 OBJECTID tTo
 OBJECTID add
 BOOL_CONST false
 OBJECTID number
 OBJECTID to
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID enter
 BOOL_CONST false
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID negate
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID enter
 OBJECTID b
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID find
 OBJECTID the
 OBJECTID difference
 OBJECTID between
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID and
 OBJECTID another
 OBJECTID number
 OBJECTID enter
 OBJECTID c
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID find
 OBJECTID the
 OBJECTID factorial
 OF
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID enter
 OBJECTID d
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID square
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID enter
 BOOL_CONST false
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID cube
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID enter
 BOOL_CONST false
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID find
 OBJECTID out
 IF
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID is
 BOOL_CONST false
 OBJECTID multiple
 OF
 OBJECTID enter
 OBJECTID g
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID divide
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID by
 OBJECTID enter
 OBJECTID h
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID get
 BOOL_CONST false
 NEW
 OBJECTID number
 OBJECTID enter
 OBJECTID j
 OBJECTID n
 OBJECTID out_string
 OBJECTID tTo
 OBJECTID quit
 OBJECTID enter
 OBJECTID q
 OBJECTID n
 OBJECTID n
 OBJECTID in_string
 OBJECTID prompt
 TYPEID String
 OBJECTID out_string
 OBJECTID n
 OBJECTID out_string
 TYPEID Please
 OBJECTID enter
 BOOL_CONST false
 OBJECTID number
 OBJECTID in_string
 OBJECTID get_int
 TYPEID Int
 LET
 OBJECTID z
 TYPEID A2I
 NEW
 TYPEID A2I
 IN
 LET
 BOOL_CONST false
 TYPEID String
 OBJECTID prompt
 IN
 OBJECTID z
 OBJECTID a2i
 BOOL_CONST false
 OBJECTID is_even
 OBJECTID num
 TYPEID Int
 TYPEID Bool
 LET
 OBJECTID x
 TYPEID Int
 OBJECTID num
 IN
 IF
 OBJECTID x
 THEN
 OBJECTID is_even
 OBJECTID x
 ELSE
 IF
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 OBJECTID is_even
 OBJECTID x
 FI
 FI
 FI
 OBJECTID class_type
 OBJECTID var
 TYPEID A
 TYPEID SELF_TYPE
 CASE
 OBJECTID var
 OF
 BOOL_CONST false
 TYPEID A
 OBJECTID out_string
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID A
 OBJECTID n
 OBJECTID b
 TYPEID B
 OBJECTID out_string
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID B
 OBJECTID n
 OBJECTID c
 TYPEID C
 OBJECTID out_string
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID C
 OBJECTID n
 OBJECTID d
 TYPEID D
 OBJECTID out_string
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID D
 OBJECTID n
 BOOL_CONST false
 TYPEID E
 OBJECTID out_string
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID E
 OBJECTID n
 OBJECTID o
 TYPEID Object
 OBJECTID out_string
 TYPEID Oooops
 OBJECTID n
 ESAC
 OBJECTID print
 OBJECTID var
 TYPEID A
 TYPEID SELF_TYPE
 LET
 OBJECTID z
 TYPEID A2I
 NEW
 TYPEID A2I
 IN
 OBJECTID out_string
 OBJECTID z
 OBJECTID i2a
 OBJECTID var
 OBJECTID value
 OBJECTID out_string
 OBJECTID main
 TYPEID Object
 OBJECTID avar
 NEW
 TYPEID A
 WHILE
 OBJECTID flag
 LOOP
 OBJECTID avar
 NEW
 TYPEID A
 OBJECTID set_var
 OBJECTID get_int
 OBJECTID out_string
 OBJECTID number
 OBJECTID print
 OBJECTID avar
 IF
 OBJECTID is_even
 OBJECTID avar
 OBJECTID value
 THEN
 OBJECTID out_string
 OBJECTID is
 OBJECTID even
 OBJECTID n
 ELSE
 OBJECTID out_string
 OBJECTID is
 OBJECTID odd
 OBJECTID n
 FI
 OBJECTID print
 OBJECTID avar
 OBJECTID prints
 OBJECTID out
 OBJECTID answer
 OBJECTID class_type
 OBJECTID avar
 OBJECTID char
 OBJECTID menu
 IF
 OBJECTID char
 STR_CONST "a"
 THEN
 OBJECTID add
 OBJECTID a_var
 NEW
 TYPEID A
 OBJECTID set_var
 OBJECTID get_int
 OBJECTID avar
 NEW
 TYPEID B
 OBJECTID method2
 OBJECTID avar
 OBJECTID value
 OBJECTID a_var
 OBJECTID value
 ELSE
 IF
 OBJECTID char
 STR_CONST "b"
 THEN
 OBJECTID negate
 CASE
 OBJECTID avar
 OF
 OBJECTID c
 TYPEID C
 OBJECTID avar
 OBJECTID c
 OBJECTID method6
 OBJECTID c
 OBJECTID value
 BOOL_CONST false
 TYPEID A
 OBJECTID avar
 BOOL_CONST false
 OBJECTID method3
 BOOL_CONST false
 OBJECTID value
 OBJECTID o
 TYPEID Object
 OBJECTID out_string
 TYPEID Oooops
 OBJECTID n
 OBJECTID abort
 ESAC
 ELSE
 IF
 OBJECTID char
 STR_CONST "c"
 THEN
 OBJECTID diff
 OBJECTID a_var
 NEW
 TYPEID A
 OBJECTID set_var
 OBJECTID get_int
 OBJECTID avar
 NEW
 TYPEID D
 OBJECTID method4
 OBJECTID avar
 OBJECTID value
 OBJECTID a_var
 OBJECTID value
 ELSE
 IF
 OBJECTID char
 STR_CONST "d"
 THEN
 OBJECTID avar
 NEW
 TYPEID C
 TYPEID A
 OBJECTID method5
 OBJECTID avar
 OBJECTID value
 ELSE
 OBJECTID factorial
 IF
 OBJECTID char
 STR_CONST "e"
 THEN
 OBJECTID avar
 NEW
 TYPEID C
 TYPEID B
 OBJECTID method5
 OBJECTID avar
 OBJECTID value
 ELSE
 OBJECTID square
 IF
 OBJECTID char
 STR_CONST "f"
 THEN
 OBJECTID avar
 NEW
 TYPEID C
 TYPEID C
 OBJECTID method5
 OBJECTID avar
 OBJECTID value
 ELSE
 OBJECTID cube
 IF
 OBJECTID char
 STR_CONST "g"
 THEN
 OBJECTID multiple
 OF
 IF
 NEW
 TYPEID D
 OBJECTID method7
 OBJECTID avar
 OBJECTID value
 THEN
 OBJECTID avar
 NEW
 TYPEID A
 OBJECTID method1
 OBJECTID avar
 OBJECTID value
 OBJECTID out_string
 OBJECTID number
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID is
 OBJECTID divisible
 OBJECTID by
 OBJECTID n
 ELSE
 OBJECTID avar
 NEW
 TYPEID A
 OBJECTID set_var
 OBJECTID out_string
 OBJECTID number
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID is
 NOT
 OBJECTID divisible
 OBJECTID by
 OBJECTID n
 FI
 ELSE
 IF
 OBJECTID char
 STR_CONST "h"
 THEN
 LET
 OBJECTID x
 TYPEID A
 IN
 OBJECTID x
 NEW
 TYPEID E
 OBJECTID method6
 OBJECTID avar
 OBJECTID value
 LET
 BOOL_CONST false
 TYPEID Int
 OBJECTID avar
 OBJECTID value
 OBJECTID x
 OBJECTID value
 IN
 OBJECTID out_string
 OBJECTID number
 OBJECTID print
 OBJECTID avar
 OBJECTID out_string
 OBJECTID is
 OBJECTID equal
 OBJECTID to
 OBJECTID print
 OBJECTID x
 OBJECTID out_string
 OBJECTID times
 OBJECTID with
 BOOL_CONST false
 OBJECTID remainder
 OF
 LET
 BOOL_CONST false
 TYPEID A2I
 NEW
 TYPEID A2I
 IN
 OBJECTID out_string
 BOOL_CONST false
 OBJECTID i2a
 BOOL_CONST false
 OBJECTID out_string
 OBJECTID n
 OBJECTID end
 LET
 BOOL_CONST false
 OBJECTID end
 LET
 BOOL_CONST false
 OBJECTID avar
 OBJECTID x
 OBJECTID end
 LET
 OBJECTID x
 ELSE
 IF
 OBJECTID char
 STR_CONST "j"
 THEN
 OBJECTID avar
 NEW
 TYPEID A
 ELSE
 IF
 OBJECTID char
 STR_CONST "q"
 THEN
 OBJECTID flag
 BOOL_CONST false
 ELSE
 OBJECTID avar
 NEW
 TYPEID A
 OBJECTID method1
 OBJECTID avar
 OBJECTID value
 OBJECTID divide
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 POOL