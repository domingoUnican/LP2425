# coding: utf-8
from Lexer import CoolLexer
from sly import Parser
import sys
import os
from Clases import *

class Auxiliar(Parser):
####IF ⟨Expresion⟩ THEN ⟨Expresion⟩ ELSE ⟨Expresion⟩ FI#   ######################################################
    @_("IF expression THEN expression ELSE expression FI")
    def expression(self, p):
        return Condicional(condicion=p[1], verdadero=p[3], falso=p[5])

    @_('IF expression THEN error FI')
    def expression(self, p):
        return Condicional(condicion=p[1], verdadero=NoExpr(), falso=NoExpr())

    @_('IF error THEN expr ELSE expr FI')
    def expr(self, p):
        return Condicional(condicion=NoExpr(), verdadero=p[3], falso=p[5])

    @_('IF expr THEN expr ELSE expr FI')
    def expr(self, p):
        return Condicional(condicion=p[1], verdadero=p[3], falso=p[5])
#################################################################################################################
    # WHILE ⟨Expresion⟩ LOOP ⟨Expresion⟩ POOL
    @_("WHILE expression LOOP expression POOL")
    def expression(self, p):
        return Bucle(condicion=p[1], cuerpo=p[3])

    @_('WHILE expression LOOP expression POOL')
    def expr(self, p):
        return Bucle(condicion=p.expr0, cuerpo=p.expr1)

    @_('WHILE error LOOP error POOL')
    def expr(self, p):
        return Bucle(condicion=NoExpr(), cuerpo=NoExpr())

    @_('WHILE error LOOP expression POOL')
    def expr(self, p):
        return Bucle(condicion=NoExpr(), cuerpo=p[3])

    @_('WHILE expression LOOP error POOL')
    def expr(self, p):
        return Bucle(condicion=p[1], cuerpo=NoExpr())



#################################################################################################################

    # LET OBJECTID: TYPEID[ < - ⟨Expresion⟩] (, OBJECTID: TYPEID[< - ⟨Expresion⟩]) * IN ⟨Expresion⟩
    @_("LET listaasignaciones IN expression ")
    def expression(self, p):
        lets = []
        temporal = p[3]
        for nombreVariable, tipoVariable, inicializacion in p[1]:
            temporal = Let(nombre=nombreVariable, tipo=tipoVariable, inicializacion = inicializacion, cuerpo = temporal)
            #lets.append(Let(nombre=asignacion[0], tipo=asignacion[1]))

        return temporal

    #nueva lista de asiganciones
    @_("OBJECTID ':' TYPEID")
    def listaasignaciones(self, p):
        lista = [(p[0], p[2], NoExpr)]
        return lista

    @_("OBJECTID ':' TYPEID ',' listaasignaciones")
    def listaasignaciones(self, p):
        return [(p[0], p[2], NoExpr())] + p[4]

    # CASE ⟨Expresion⟩ OF(OBJECTID: TYPEID DARROW < Expresion >)+; ESAC
    @_("CASE expression OF (OBJECTID ':' TYPEID DARROW expression)+ ESAC")
    def expression(self, p):
        #TODO
        return Swicht(expr=p[1])

    # NEW TYPEID
    @_("NEW TYPEID")
    def expression(self, p):
        return Nueva(tipo=p[1])

    # {(⟨Expresion⟩;) +}
    @_("'{' (expression)+ '}'")
    def expression(self, p):
        pass

    # OBJECTID
    @_("OBJECTID")
    def expression(self, p):
        return Objeto(nombre=p[0])

    # INT_CONST
    @_("INT_CONST")
    def expression(self, p):
        return Entero(valor=p[0])

    # STR_CONST
    @_("STR_CONST")
    def expression(self, p):
        return String(valor=p[0])

    # BOOL_CONST
    @_("BOOL_CONST")
    def expression(self, p):
        return Booleano(valor = p[0])


a = CoolLexer()
b = CoolParser()
with open("02\\minimos\\classonefield.test", "r") as f:
    txt = f.read()
