Grammar:

Rule 0     S' -> expression
Rule 1     expression -> ( expression )
Rule 2     expression -> expression = expression
Rule 3     expression -> expression <= expression
Rule 4     expression -> expression < expression
Rule 5     expression -> expression / expression
Rule 6     expression -> expression * expression
Rule 7     expression -> expression - expression
Rule 8     expression -> expression + expression
Rule 9     expression -> INT_CONST

Unused terminals:

    ELSE
    TYPEID
    BOOL_CONST
    STR_CONST
    LET
    ESAC
    LOOP
    DARROW
    INHERITS
    POOL
    ~
    ASSIGN
    IN
    NOT
    NEW
    ISVOID
    OBJECTID
    IF
    OF
    LE
    CLASS
    THEN
    FI
    WHILE
    .
    CASE

Terminals, with rules where they appear:

(                    : 1
)                    : 1
*                    : 6
+                    : 8
-                    : 7
.                    : 
/                    : 5
<                    : 4
<=                   : 3
=                    : 2
ASSIGN               : 
BOOL_CONST           : 
CASE                 : 
CLASS                : 
DARROW               : 
ELSE                 : 
ESAC                 : 
FI                   : 
IF                   : 
IN                   : 
INHERITS             : 
INT_CONST            : 9
ISVOID               : 
LE                   : 
LET                  : 
LOOP                 : 
NEW                  : 
NOT                  : 
OBJECTID             : 
OF                   : 
POOL                 : 
STR_CONST            : 
THEN                 : 
TYPEID               : 
WHILE                : 
error                : 
~                    : 

Nonterminals, with rules where they appear:

expression           : 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 0


state 0

    (0) S' -> . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 2

    (1) expression -> ( . expression )
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 11

state 3

    (9) expression -> INT_CONST .
    =               reduce using rule 9 (expression -> INT_CONST .)
    <=              reduce using rule 9 (expression -> INT_CONST .)
    <               reduce using rule 9 (expression -> INT_CONST .)
    /               reduce using rule 9 (expression -> INT_CONST .)
    *               reduce using rule 9 (expression -> INT_CONST .)
    -               reduce using rule 9 (expression -> INT_CONST .)
    +               reduce using rule 9 (expression -> INT_CONST .)
    $end            reduce using rule 9 (expression -> INT_CONST .)
    )               reduce using rule 9 (expression -> INT_CONST .)


state 4

    (2) expression -> expression = . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 12

state 5

    (3) expression -> expression <= . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 13

state 6

    (4) expression -> expression < . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 14

state 7

    (5) expression -> expression / . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 15

state 8

    (6) expression -> expression * . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 16

state 9

    (7) expression -> expression - . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 17

state 10

    (8) expression -> expression + . expression
    (1) expression -> . ( expression )
    (2) expression -> . expression = expression
    (3) expression -> . expression <= expression
    (4) expression -> . expression < expression
    (5) expression -> . expression / expression
    (6) expression -> . expression * expression
    (7) expression -> . expression - expression
    (8) expression -> . expression + expression
    (9) expression -> . INT_CONST
    (               shift and go to state 2
    INT_CONST       shift and go to state 3

    expression                     shift and go to state 18

state 11

    (1) expression -> ( expression . )
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
    )               shift and go to state 19
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 12

    (2) expression -> expression = expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for <= resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 2 (expression -> expression = expression .)
    )               reduce using rule 2 (expression -> expression = expression .)
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 13

    (3) expression -> expression <= expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for <= resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 3 (expression -> expression <= expression .)
    )               reduce using rule 3 (expression -> expression <= expression .)
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 14

    (4) expression -> expression < expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for <= resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 4 (expression -> expression < expression .)
    )               reduce using rule 4 (expression -> expression < expression .)
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 15

    (5) expression -> expression / expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for <= resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 5 (expression -> expression / expression .)
    )               reduce using rule 5 (expression -> expression / expression .)
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 16

    (6) expression -> expression * expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for <= resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 6 (expression -> expression * expression .)
    )               reduce using rule 6 (expression -> expression * expression .)
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 17

    (7) expression -> expression - expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for <= resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 7 (expression -> expression - expression .)
    )               reduce using rule 7 (expression -> expression - expression .)
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 18

    (8) expression -> expression + expression .
    (2) expression -> expression . = expression
    (3) expression -> expression . <= expression
    (4) expression -> expression . < expression
    (5) expression -> expression . / expression
    (6) expression -> expression . * expression
    (7) expression -> expression . - expression
    (8) expression -> expression . + expression
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for <= resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 8 (expression -> expression + expression .)
    )               reduce using rule 8 (expression -> expression + expression .)
    =               shift and go to state 4
    <=              shift and go to state 5
    <               shift and go to state 6
    /               shift and go to state 7
    *               shift and go to state 8
    -               shift and go to state 9
    +               shift and go to state 10


state 19

    (1) expression -> ( expression ) .
    =               reduce using rule 1 (expression -> ( expression ) .)
    <=              reduce using rule 1 (expression -> ( expression ) .)
    <               reduce using rule 1 (expression -> ( expression ) .)
    /               reduce using rule 1 (expression -> ( expression ) .)
    *               reduce using rule 1 (expression -> ( expression ) .)
    -               reduce using rule 1 (expression -> ( expression ) .)
    +               reduce using rule 1 (expression -> ( expression ) .)
    $end            reduce using rule 1 (expression -> ( expression ) .)
    )               reduce using rule 1 (expression -> ( expression ) .)


Conflicts:

shift/reduce conflict for = in state 12 resolved as shift
shift/reduce conflict for <= in state 12 resolved as shift
shift/reduce conflict for < in state 12 resolved as shift
shift/reduce conflict for / in state 12 resolved as shift
shift/reduce conflict for * in state 12 resolved as shift
shift/reduce conflict for - in state 12 resolved as shift
shift/reduce conflict for + in state 12 resolved as shift
shift/reduce conflict for = in state 13 resolved as shift
shift/reduce conflict for <= in state 13 resolved as shift
shift/reduce conflict for < in state 13 resolved as shift
shift/reduce conflict for / in state 13 resolved as shift
shift/reduce conflict for * in state 13 resolved as shift
shift/reduce conflict for - in state 13 resolved as shift
shift/reduce conflict for + in state 13 resolved as shift
shift/reduce conflict for = in state 14 resolved as shift
shift/reduce conflict for <= in state 14 resolved as shift
shift/reduce conflict for < in state 14 resolved as shift
shift/reduce conflict for / in state 14 resolved as shift
shift/reduce conflict for * in state 14 resolved as shift
shift/reduce conflict for - in state 14 resolved as shift
shift/reduce conflict for + in state 14 resolved as shift
shift/reduce conflict for = in state 15 resolved as shift
shift/reduce conflict for <= in state 15 resolved as shift
shift/reduce conflict for < in state 15 resolved as shift
shift/reduce conflict for / in state 15 resolved as shift
shift/reduce conflict for * in state 15 resolved as shift
shift/reduce conflict for - in state 15 resolved as shift
shift/reduce conflict for + in state 15 resolved as shift
shift/reduce conflict for = in state 16 resolved as shift
shift/reduce conflict for <= in state 16 resolved as shift
shift/reduce conflict for < in state 16 resolved as shift
shift/reduce conflict for / in state 16 resolved as shift
shift/reduce conflict for * in state 16 resolved as shift
shift/reduce conflict for - in state 16 resolved as shift
shift/reduce conflict for + in state 16 resolved as shift
shift/reduce conflict for = in state 17 resolved as shift
shift/reduce conflict for <= in state 17 resolved as shift
shift/reduce conflict for < in state 17 resolved as shift
shift/reduce conflict for / in state 17 resolved as shift
shift/reduce conflict for * in state 17 resolved as shift
shift/reduce conflict for - in state 17 resolved as shift
shift/reduce conflict for + in state 17 resolved as shift
shift/reduce conflict for = in state 18 resolved as shift
shift/reduce conflict for <= in state 18 resolved as shift
shift/reduce conflict for < in state 18 resolved as shift
shift/reduce conflict for / in state 18 resolved as shift
shift/reduce conflict for * in state 18 resolved as shift
shift/reduce conflict for - in state 18 resolved as shift
shift/reduce conflict for + in state 18 resolved as shift