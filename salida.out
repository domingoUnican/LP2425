Grammar:

Rule 0     S' -> expression
Rule 1     expression -> expression - expression
Rule 2     expression -> expression + expression
Rule 3     expression -> INT_CONST
Rule 4     expression -> <empty>
Rule 5     asignation -> OBJECTID = expression

Unused terminals:

    WHILE
    BOOL_CONST
    POOL
    LET
    ISVOID
    LE
    TYPEID
    LOOP
    NEW
    ASSIGN
    CASE
    IN
    THEN
    DARROW
    OF
    FI
    ELSE
    NOT
    ESAC
    STR_CONST
    CLASS
    INHERITS
    IF

Terminals, with rules where they appear:

+                    : 2
-                    : 1
=                    : 5
ASSIGN               : 
BOOL_CONST           : 
CASE                 : 
CLASS                : 
DARROW               : 
ELSE                 : 
ESAC                 : 
FI                   : 
IF                   : 
IN                   : 
INHERITS             : 
INT_CONST            : 3
ISVOID               : 
LE                   : 
LET                  : 
LOOP                 : 
NEW                  : 
NOT                  : 
OBJECTID             : 5
OF                   : 
POOL                 : 
STR_CONST            : 
THEN                 : 
TYPEID               : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear:

asignation           : 
expression           : 1 1 2 2 5 0


state 0

    (0) S' -> . expression
    (1) expression -> . expression - expression
    (2) expression -> . expression + expression
    (3) expression -> . INT_CONST
    (4) expression -> .
    INT_CONST       shift and go to state 2
    -               reduce using rule 4 (expression -> .)
    +               reduce using rule 4 (expression -> .)
    $end            reduce using rule 4 (expression -> .)

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . - expression
    (2) expression -> expression . + expression
    -               shift and go to state 3
    +               shift and go to state 4


state 2

    (3) expression -> INT_CONST .
    -               reduce using rule 3 (expression -> INT_CONST .)
    +               reduce using rule 3 (expression -> INT_CONST .)
    $end            reduce using rule 3 (expression -> INT_CONST .)


state 3

    (1) expression -> expression - . expression
    (1) expression -> . expression - expression
    (2) expression -> . expression + expression
    (3) expression -> . INT_CONST
    (4) expression -> .
    INT_CONST       shift and go to state 2
    -               reduce using rule 4 (expression -> .)
    +               reduce using rule 4 (expression -> .)
    $end            reduce using rule 4 (expression -> .)

    expression                     shift and go to state 5

state 4

    (2) expression -> expression + . expression
    (1) expression -> . expression - expression
    (2) expression -> . expression + expression
    (3) expression -> . INT_CONST
    (4) expression -> .
    INT_CONST       shift and go to state 2
    -               reduce using rule 4 (expression -> .)
    +               reduce using rule 4 (expression -> .)
    $end            reduce using rule 4 (expression -> .)

    expression                     shift and go to state 6

state 5

    (1) expression -> expression - expression .
    (1) expression -> expression . - expression
    (2) expression -> expression . + expression
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 1 (expression -> expression - expression .)
    -               shift and go to state 3
    +               shift and go to state 4


state 6

    (2) expression -> expression + expression .
    (1) expression -> expression . - expression
    (2) expression -> expression . + expression
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 2 (expression -> expression + expression .)
    -               shift and go to state 3
    +               shift and go to state 4


Conflicts:

shift/reduce conflict for - in state 5 resolved as shift
shift/reduce conflict for + in state 5 resolved as shift
shift/reduce conflict for - in state 6 resolved as shift
shift/reduce conflict for + in state 6 resolved as shift